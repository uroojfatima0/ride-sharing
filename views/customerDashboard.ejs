<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Customer Dashboard</title>
  <style>
    /* Reset default styles for a clean start */
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    /* General body styling */
    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background: #f4f7fa;
      color: #333;
      display: flex;
      justify-content: center;
      align-items: center;
      flex-direction: column;
      min-height: 100vh;
      padding: 20px;
    }

    /* Dashboard container */
    .dashboard-container {
      background: #fff;
      width: 100%;
      max-width: 1000px;
      border-radius: 12px;
      box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
      padding: 40px;
      text-align: center;
      margin-top: 30px;
    }

    /* Header styling */
    .dashboard-header h1 {
      font-size: 2.5em;
      color: #2b2b2b;
      margin-bottom: 30px;
      font-weight: bold;
      text-transform: capitalize;
    }

    /* Form and input styling */
    form {
      margin-bottom: 40px;
      display: flex;
      flex-direction: column;
      gap: 15px;
      max-width: 500px;
      margin: 0 auto;
    }

    label {
      font-weight: bold;
      color: #444;
      font-size: 1.1em;
      text-align: left;
    }

    input {
      padding: 10px;
      border: 2px solid #ddd;
      border-radius: 8px;
      font-size: 1em;
      outline: none;
      transition: border-color 0.3s ease;
    }

    input:focus {
      border-color: #ff61a6;
    }

    button {
      padding: 12px 20px;
      background: #ff61a6;
      color: white;
      border: none;
      border-radius: 8px;
      font-size: 1.1em;
      cursor: pointer;
      transition: background 0.3s ease;
    }

    button:hover {
      background: #e65694;
    }

    /* Section for links to available actions */
    .dashboard-links {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
      gap: 20px;
    }

    /* Each action card */
    .card {
      background: #ff61a6;
      /* Soft pinkish background */
      border-radius: 12px;
      padding: 30px;
      box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
      transition: all 0.3s ease;
      text-align: center;
    }

    .card:hover {
      transform: translateY(-5px);
      box-shadow: 0 8px 15px rgba(0, 0, 0, 0.2);
    }

    .card a {
      display: inline-block;
      color: #fff;
      text-decoration: none;
      font-size: 1.2em;
      font-weight: bold;
      background: #e65694;
      padding: 10px 20px;
      border-radius: 8px;
      transition: background 0.3s ease;
    }

    .card a:hover {
      background: #d54982;
    }

    /* Card titles */
    .card h3 {
      font-size: 1.5em;
      margin-bottom: 15px;
    }

    /* Footer text with padding */
    .footer {
      margin-top: 40px;
      font-size: 0.9em;
      color: #888;
    }

    h2 {
      margin-top: 10px;
      margin-bottom: 10px;
    }

    /* Ride Status section */
    #rideStatus {
      padding: 20px;
      background: #fff0f6;
      border-radius: 10px;
      margin-top: 20px;
      box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
      text-align: left;
    }

    #rideStatus button {
      background-color: #ff61a6;
      padding: 10px 20px;
      border-radius: 8px;
      color: #fff;
      border: none;
      margin-top: 10px;
      font-size: 1em;
    }

    #rideStatus button:hover {
      background-color: #e65694;
    }

    /* Ride History */
    #rideHistory {
      list-style-type: none;
      margin-top: 20px;
      padding: 0;
    }

    #rideHistory li {
      background: #f8f9fa;
      padding: 10px;
      border-radius: 8px;
      margin-bottom: 10px;
      box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    }

    /* Navigation Buttons */
    .dashboard-links {
      display: flex;
      justify-content: center;
      gap: 20px;
      margin-bottom: 20px;
    }

    .dashboard-links button {
      width: 200px;
      padding: 15px;
    }

    /* Media query for responsiveness */
    @media (max-width: 768px) {
      .dashboard-container {
        width: 100%;
        height: 80vh;
        padding: 20px;
      }

      .dashboard-links {
        flex-direction: column;
        align-items: center;
      }

      .dashboard-links button {
        width: 100%;
      }

      .form input,
      .form button {
        width: 100%;
      }
    }
  </style>
</head>

<body>
  <div class="dashboard-container">
    <div class="dashboard-header">
      <h1>Welcome, <%= customerName %>!</h1>
      <h2>Customer Dashboard</h2>
    </div>

    <!-- Navigation Buttons -->
    <div class="dashboard-links">
      <button onclick="showSection('requestRideSection')">Request Ride</button>
      <button onclick="showSection('ongoingRideSection')">Ongoing Ride</button>
      <button onclick="showSection('rideHistorySection')">Ride History</button>
    </div>

    <!-- Request Ride Section -->
    <div id="requestRideSection">
      <h2>Request a Ride</h2>
      <form id="requestRideForm">
        <label for="pickupLocation">Pickup Location</label>
        <input type="text" id="pickupLocation" required>
        <label for="dropOffLocation">Drop-off Location</label>
        <input type="text" id="dropOffLocation" required>
        <label for="ridePreferences">Ride Preferences</label>
        <input type="text" id="ridePreferences" required>
        <button type="submit">Request Ride</button>
      </form>
    </div>

    <!-- Ongoing Ride Section -->
    <div id="ongoingRideSection" style="display: none;">
      <h2>Your Ongoing Ride</h2>
      <div id="rideStatus">
        <% if (ongoingRide) { %>
          <p><strong>Pickup:</strong>
            <%= ongoingRide.pickupLocation %>
          </p>
          <p><strong>Drop-off:</strong>
            <%= ongoingRide.dropOffLocation %>
          </p>
          <p><strong>Status:</strong>
            <%= ongoingRide.status %>
          </p>
          <% if (ongoingRide.status==='pending' ) { %>
            <button id="cancelRideBtn">Cancel Ride</button>
            <% } %>
              <% } else { %>
                <p>No ongoing rides.</p>
                <% } %>
      </div>
    </div>

    <!-- Ride History Section -->
    <div id="rideHistorySection" style="display: none;">
      <h2>Ride History</h2>
      <ul id="rideHistory">
        <% completedRides.forEach(ride=> { %>
          <li>
            <%= ride.pickupLocation %> to <%= ride.dropOffLocation %> - <%= ride.status %>
          </li>
          <% }) %>
      </ul>
    </div>

    <div class="footer">
      <p>&copy; 2025 Customer Dashboard. All rights reserved.</p>
    </div>
  </div>

  <script>
    function showSection(sectionId) {
      // Hide all sections
      document.getElementById('requestRideSection').style.display = 'none';
      document.getElementById('ongoingRideSection').style.display = 'none';
      document.getElementById('rideHistorySection').style.display = 'none';

      // Show selected section
      document.getElementById(sectionId).style.display = 'block';
    }

    // Request Ride Form submission handler
    document.getElementById('requestRideForm').addEventListener('submit', async (event) => {
      event.preventDefault();

      const rideData = {
        pickupLocation: document.getElementById('pickupLocation').value,
        dropOffLocation: document.getElementById('dropOffLocation').value,
        ridePreferences: document.getElementById('ridePreferences').value
      };

      const response = await fetch('http://localhost:5000/api/rides/request', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(rideData)
      });

      const result = await response.json();
      alert(result.message);
    });

    // Handle cancel ride button click
    document.getElementById('cancelRideBtn')?.addEventListener('click', async () => {
      const rideId = "<%= ongoingRide ? ongoingRide._id : '' %>"; // Use the ongoing ride's ID if available

      if (!rideId) {
        return alert('No ongoing ride to cancel');
      }

      const response = await fetch(`/api/rides/${rideId}/cancel`, {
        method: 'POST',
      });

      const result = await response.json();
      alert(result.message);
    });

    // Fetch ride history
    async function fetchRideHistory() {
      const customerId = "<%= customerId %>"; // Correct usage of passed customerId
      const response = await fetch(`/api/customers/${customerId}/ride-history`);
      const data = await response.json();

      const rideHistoryEl = document.getElementById('rideHistory');
      rideHistoryEl.innerHTML = data.rides.map(ride => `
        <li>${ride.pickupLocation} to ${ride.dropOffLocation} - ${ride.status}</li>
      `).join('');
    }
    fetchRideHistory();
  </script>
</body>


</html>